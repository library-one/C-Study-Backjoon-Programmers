#include <iostream>
#include <algorithm>
#include <queue>
#include <functional>
using namespace std;
    //큐 = 먼저 들어오는 데이터가 먼저 나간다.
    //우선순위 큐 = 먼저 들어온 자료값이 먼저 나가는게 아니라 우선순위가 높은 데이터부터 가장 먼저 나간다.(Priporty Queue)
    //우선순위 큐 = 안에는 heap 이라는 우선순위를 정한 이중트리가 2가지가 존재한다
    // 힙(Heap) 이란 우선순위 큐를 위해 고안된 **완전이진트리** 형태의 자료구조이다. 
    //최대힙 = > 부모- 대 자식 - 소 노드 순 이진탐색트리(BST) 와 달리 중복 허용 
    //최소힙 = > 부모- 소 자식 - 대 노드 순
    //최대 힙, 최소 힙 을 정해야 함
    //greater<int> 오름차순 정렬
    //less<int> 내림차순 정렬
priority_queue<int,vector<int>,less<int>> maxh;
priority_queue<int, vector<int>, greater<int>> minh;
int n;

int main(void) {

    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    cin >> n;
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        //1. 최대힙의 원소 수는 최소 힙보다 1보다 크거나 같아야 한다.
        //2. 최대힙의 원소는 최소힙의 원소보다 작아야 한다.
        //3. 최대힙의 원소는 항상 커야되고 최소 힙의 원소는 항상 작아야한다.
        //최대힙의 원소 삽입 
        if (maxh.empty()) { maxh.push(x); }
        //힙의 크기 값이 같을 경우 최대 힙부터 삽입
        else if (maxh.size() == minh.size()) { maxh.push(x); }
        // 그 외 상황은 최소힙에 삽입
        else { minh.push(x); }

        //만약 최대힙 원소 보다 최소힙의 원소가 클 경우 스왑
        if (!maxh.empty() && !minh.empty() && (maxh.top() > minh.top())) {
            int a = maxh.top();
            int b = minh.top();

            //a 와 b 에 저장햇으니 값 지우기
            maxh.pop();
            minh.pop();
            //top 값 자리 바꾸기
            maxh.push(b);
            minh.push(a);
        }
        // 들어온 값중 큰값은 최대 힙으로 작은 값은 최소 힙으로 가는데 최대힙.top 을 출력하면
        // 조건에 의해 최소힙의 노드의 값보다 큰 값이 배출된다. 
        // 또한 위의 조건에서 최대힙크기와 최소힙크기가 항상 같기 때문에 
        // 문제의 조건에 맞는 가운데 값중 큰값을 항상 출력 할 것이다
        // priority_queue 는 중복을 허용하기 때문이다.
        //위의 알고리즘 수행후 최대 힙의 top 을 배출
        cout << maxh.top() << "\n";
    }


    return 0;
}
