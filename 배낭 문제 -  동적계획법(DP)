#include<iostream>

//문제에서 짐을 쪼갤 수 있다면 그리디 
//짐을 쪼갤수 없다면 동적계획법(dp)
using namespace std;

//최대 무게의 가치값 이 2가지로 나뉜다.
//최대 무게의 가까운 값의 가치값이 가장 큰 경우 
// ㄴ> 배열[i-1][j]
//2개 이상의 무게의 합이 최대 무게와 가까워서 가치값의 합이 가장 큰 경우 
// ㄴ> 배열[i-1][w-현재 짐의 무게]+현재 짐의 가치 값

int dp[101][100001];
int w[101];
int v[101];
int n, k;

int main()
{
    cin >> n >> k;
    for (int i = 1; i <= n; i++)
    {
        cin >> w[i] >> v[i];
    }
    //물건의 갯수 별로 비교
    for (int i = 1; i <= n; i++)
    {
        //무게 비교 하기
        for (int j = 1; j <= k; j++)
        {
            //물건의 무게가 가방의 최대 크기보다 작아서 물건을 넣을 수 있는 경우
            //무게가 j 라고 할 때 들어갈 수 있는 w[i]아이템의 무게
            //가방보다 큰 무게는 거름 ex)가방 = 8 >= 아이템 무게 =9
            //가방의 무게가 j 임으로 가방보다 큰 수는 안들어감.
            if (j >= w[i]) {
                //max(a,b) a와 b를 비교 
                //오로지 전 아이템의 가치와 전
                //뒤의 vp[i]값(가치)으로 dp의 배열 00부터 끝까지 저장하면서 비교함 (전과 비교)
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i]] + v[i]);
                cout <<i<<" "<<j<<" "<< dp[i][j] << endl;
            }

            //물건의 무게가 가방의 최대 크기보다 커서 물건을 못 넣을 경우
            else
                dp[i][j] = dp[i - 1][j];
        }
    }
    cout << dp[n][k];
    return 0;
}
